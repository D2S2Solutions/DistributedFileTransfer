import com.d2s2.constants.ApplicationConstants;

import javax.swing.table.DefaultTableModel;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;

public class FileSearchInterface extends javax.swing.JFrame {


    private DefaultTableModel dtmForSearchResultTable;
    private DefaultTableModel dtmForSelfFileTable;


    public FileSearchInterface(GUIController guiController, ArrayList<String> fileList) {
        initComponents();
        this.selfFilesTable.getTableHeader().setVisible(false);
        this.userNameTextField.setText(ApplicationConstants.USER_NAME);
        this.ipTextField.setText(ApplicationConstants.IP);
        this.portTextField.setText(String.valueOf(ApplicationConstants.PORT));


        this.searchButton.addActionListener(evt -> {
            dtmForSearchResultTable.setRowCount(0);
            guiController.searchFile(this.searchTextField.getText());
        });

        this.registerButton.addActionListener(evt->{
            try {
                guiController.registerInBS();
            } catch (IOException e) {
                e.printStackTrace();
            }
        });

        this.unregisterButton.addActionListener(evt->{
            guiController.unRegister();
        });

        dtmForSearchResultTable = (DefaultTableModel) searchResultsTable.getModel();
        dtmForSearchResultTable.setRowCount(0);

        dtmForSelfFileTable = (DefaultTableModel) selfFilesTable.getModel();

        int i = 0;
        l1:
        for (int x = 0; x < 5; x++) {
            for (int y = 0; y < 4; y++) {
                if (i < fileList.size()) {
                    dtmForSelfFileTable.setValueAt(fileList.get(i).toString(), x, y);
                    i++;
                } else {
                    break l1;
                }

            }
        }
    }





    public synchronized void addToTable(String nodeIp, int port, int fileCount, HashSet<String> fileList, int ttl) {
        System.out.println("Calling interface " + nodeIp + port);
        String fileNames = "";
        for (String fileName : fileList) {
            fileNames += fileName + ",";
        }
        if (!this.isValueExistsAtTable(nodeIp, port)) {
            this.dtmForSearchResultTable.addRow(new Object[]{nodeIp, port, fileCount, fileNames, ttl});
        }
    }


    private boolean isValueExistsAtTable(String ip, int port) {
        int rowCount = this.dtmForSearchResultTable.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String nodeIp = String.valueOf(dtmForSearchResultTable.getValueAt(i, 0));
            int nodePort = Integer.parseInt(dtmForSearchResultTable.getValueAt(i, 1).toString());

            if (nodeIp.equals(ip) && nodePort == port) {
                return true;
            }
        }
        return false;
    }




